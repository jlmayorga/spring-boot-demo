version: "1.0"
stages:
  - "prepare"
  - "verify"
  - "deploy"

steps:
  main_clone:
    title: "Cloning repository"
    type: "git-clone"
    repo: 'jlmayorga/spring-boot-demo'
    revision: "${{CF_REVISION}}"
    stage: "prepare"
    git: github

  run_unit_tests:
    title: Compile/Unit test
    stage: prepare
    image: 'maven:3.8-openjdk-11'
    commands:
      - mvn -Dmaven.repo.local=/codefresh/volume/m2_repository package
  build_app_image:
    title: Building Docker Image
    type: build
    stage: prepare
    image_name: jlmayorga/spring-boot-demo
    working_directory: ./
    tag: '${{CF_BRANCH}}'
    dockerfile: Dockerfile
  scan_code:
    title: Source security scan
    stage: verify
    image: 'snyk/snyk-cli:maven-3.6.3_java11'
    commands:
      - snyk monitor
  scan_image:
    title: Container security scan
    stage: verify
    image: 'aquasec/trivy'
    commands:
      - trivy image docker.io/jlmayorga/spring-boot-demo:${{CF_BRANCH}}
  run_integration_tests:
    title: Integration tests
    stage: verify
    image: maven:3.5.2-jdk-8-alpine
    commands:
      - mvn -Dmaven.repo.local=/codefresh/volume/m2_repository verify -Dserver.host=http://my-spring-app -Dsonar.organization=jlmayorga
    services:
      composition:
        my-spring-app:
          image: '${{build_app_image}}'
          ports:
            - 8080
      readiness:
        timeoutSeconds: 30
        periodSeconds: 15
        image: byrnedo/alpine-curl
        commands:
          - "curl http://my-spring-app:8080/hello/"
  sonar_scan:
    title: Sonar Scan
    stage: verify
    image: 'maven:3.8.1-jdk-11-slim'
    commands:
      - mvn -Dmaven.repo.local=/codefresh/volume/m2_repository org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.login=${{SONAR_TOKEN}} -Dsonar.host.url=https://sonarcloud.io -Dsonar.organization=jlmayorga -Dsonar.projectKey=xyz.jlmayorga:spring-boot-demo
  clone:
    title: "Cloning repository"
    type: "git-clone"
    repo: "jlmayorga/spring-boot-demo-chart"
    revision: main
    stage: "deploy"
  deploy:
    title: Deploying Helm Chart
    type: helm
    stage: deploy
    working_directory: ./spring-boot-demo-chart
    arguments:
      action: install
      chart_name: spring-boot-demo-chart
      release_name: dev-env
      helm_version: 3.2.4
      kube_context: default
      namespace: ${{CF_BRANCH_TAG_NORMALIZED}}
      cmd_ps: '--create-namespace --wait --timeout 5m'
      custom_values:
        - "ingress.host=${{CF_BRANCH_TAG_NORMALIZED}}"
        - 'image_tag=${{CF_BRANCH_TAG_NORMALIZED}}'

  add_pr_comment:
    title: Adding comment on PR
    stage: deploy
    type: kostis-codefresh/github-pr-comment
    fail_fast: false
    arguments:
      PR_COMMENT_TEXT: "[CI] Staging environment is at https://${{CF_BRANCH_TAG_NORMALIZED}}.jlmayorga.xyz/hello/"
      GIT_PROVIDER_NAME: 'github'
  run_smoke_tests:
    title: Smoke tests
    stage: deploy
    image: maven:3.5.2-jdk-8-alpine
    working_directory: "${{main_clone}}"
    fail_fast: false
    commands:
      - mvn -Dmaven.repo.local=/codefresh/volume/m2_repository verify -Dserver.host=https://${{CF_BRANCH_TAG_NORMALIZED}}.jlmayorga.xyz/hello/  -Dserver.port=443
